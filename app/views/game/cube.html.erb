<% provide(:title, "Rubik's Cube") %>
<script>

			var targetRotation = 0;
			var targetRotationOnMouseDown = 0;

			var mouseX = 0;
			var mouseXOnMouseDown = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;
			var scene = new THREE.Scene();
			var camera = new THREE.PerspectiveCamera( 100, window.innerWidth/window.innerHeight, 0.1, 1000 );

			var renderer = new THREE.WebGLRenderer();
			renderer.setSize( window.innerWidth, window.innerHeight );
			controls = new THREE.OrbitControls( camera, renderer.domElement );
				//controls.addEventListener( 'change', render ); // add this only if there is no animation loop (requestAnimationFrame)
				controls.enableDamping = true;
				controls.dampingFactor = 1;
				controls.enableZoom = false;
			document.body.appendChild( renderer.domElement );
			var c=[];
			var geometry = new THREE.BoxGeometry( 1, 1, 1 );
			var material = new THREE.MeshNormalMaterial( { color: 0x00ff00 } );
			for(var i=0;i<27;i++)
				{c[i]=new THREE.Mesh(geometry,material);
					scene.add(c[i]);
					}
					var p=0;
			/*	for(var i=0;i<3;i++)
				{
					for(var j=0;j<3;j++)
					{
						c[p].position.x+=(1.1*j);
						if(i==1)
							c[p].position.y=1.1;
						else if(i==2)
							c[p].position.y=2.2;
						p++;
					}
				}*/
				for(var i=-1 ;i<2;i++)
				{
					for(var j=-1;j<2;j++)
					{
						for(var k=-1;k<2;k++)
						{
							c[p].position.x=k*1.1;
							c[p].position.y=j*1.1;
							c[p].position.z=i*1.1;
							p++;
						}
					}
				}
			//	c[5].position.x=1.1;c[5].position.y=1.1;
			camera.position.z = 5;
			//cube5.position.y=-1.1;
			group= new THREE.Object3D();
			group2= new THREE.Object3D();
			group.add(c[24],c[25],c[26],c[6],c[7],c[8],c[15],c[16],c[17]);
			group2.add(c[0],c[1],c[2],c[9],c[10],c[11],c[20],c[19],c[18]);
			scene.add(group,group2);
				//group.rotateY(Math.PI/2);// rotate by 90 degrees
				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
			window.addEventListener( 'resize', onWindowResize, false );

			

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}
			function onDocumentMouseDown( event ) {

				event.preventDefault();

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mouseup', onDocumentMouseUp, false );
				document.addEventListener( 'mouseout', onDocumentMouseOut, false );

				mouseXOnMouseDown = event.clientX - windowHalfX;
				targetRotationOnMouseDown = targetRotation;

			}

			function onDocumentMouseMove( event ) {

				mouseX = event.clientX - windowHalfX;

				targetRotation = targetRotationOnMouseDown + ( mouseX - mouseXOnMouseDown ) * 0.02;

			}

			function onDocumentMouseUp( event ) {

				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );

			}

			function onDocumentMouseOut( event ) {

				document.removeEventListener( 'mousemove', onDocumentMouseMove, false );
				document.removeEventListener( 'mouseup', onDocumentMouseUp, false );
				document.removeEventListener( 'mouseout', onDocumentMouseOut, false );

			}	
			var render = function () {
				requestAnimationFrame( render );
				group.rotation.y += ( targetRotation - group.rotation.y ) * 0.05;

				//group.rotateY("-0.05");
				group2.rotateY("0.05");
				//c[26].rotateX(0.01);
				//c[26].position.z-=0.1;
				//c[0].rotation.x += 0.02;
				c[2].rotation.y = 0.05;
				//cube1.position.y=0;
				//cube3.position.x=-1.1;cube4.position.y=1.1;*/
				renderer.render(scene, camera);
				
			};

			render();
		</script>